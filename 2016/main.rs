extern crate core;

use std::env;

#[path = "2016-01-1.rs"]
mod s_2016_01_1;
#[path = "2016-01-2.rs"]
mod s_2016_01_2;
#[path = "2016-02-1.rs"]
mod s_2016_02_1;
#[path = "2016-02-2.rs"]
mod s_2016_02_2;
#[path = "2016-03-1.rs"]
mod s_2016_03_1;
#[path = "2016-03-2.rs"]
mod s_2016_03_2;
#[path = "2016-04-1.rs"]
mod s_2016_04_1;
#[path = "2016-04-2.rs"]
mod s_2016_04_2;
#[path = "2016-05-1.rs"]
mod s_2016_05_1;
#[path = "2016-05-2.rs"]
mod s_2016_05_2;
#[path = "2016-06-1.rs"]
mod s_2016_06_1;
#[path = "2016-06-2.rs"]
mod s_2016_06_2;
#[path = "2016-07-1.rs"]
mod s_2016_07_1;
#[path = "2016-07-2.rs"]
mod s_2016_07_2;
#[path = "2016-08-1.rs"]
mod s_2016_08_1;
#[path = "2016-08-2.rs"]
mod s_2016_08_2;
#[path = "2016-09-1.rs"]
mod s_2016_09_1;
#[path = "2016-09-2.rs"]
mod s_2016_09_2;
#[path = "2016-10-1.rs"]
mod s_2016_10_1;
#[path = "2016-10-2.rs"]
mod s_2016_10_2;
#[path = "2016-11-1.rs"]
mod s_2016_11_1;
#[path = "2016-11-2.rs"]
mod s_2016_11_2;
#[path = "2016-12-1.rs"]
mod s_2016_12_1;
#[path = "2016-12-2.rs"]
mod s_2016_12_2;
#[path = "2016-13-1.rs"]
mod s_2016_13_1;
#[path = "2016-13-2.rs"]
mod s_2016_13_2;
#[path = "2016-14-1.rs"]
mod s_2016_14_1;
#[path = "2016-14-2.rs"]
mod s_2016_14_2;
#[path = "2016-15-1.rs"]
mod s_2016_15_1;
#[path = "2016-15-2.rs"]
mod s_2016_15_2;
#[path = "2016-16-1.rs"]
mod s_2016_16_1;
#[path = "2016-16-2.rs"]
mod s_2016_16_2;
#[path = "2016-17-1.rs"]
mod s_2016_17_1;
#[path = "2016-17-2.rs"]
mod s_2016_17_2;
#[path = "2016-18-1.rs"]
mod s_2016_18_1;
#[path = "2016-18-2.rs"]
mod s_2016_18_2;
#[path = "2016-19-1.rs"]
mod s_2016_19_1;
#[path = "2016-19-2.rs"]
mod s_2016_19_2;
#[path = "2016-20-1.rs"]
mod s_2016_20_1;
#[path = "2016-20-2.rs"]
mod s_2016_20_2;
#[path = "2016-21-1.rs"]
mod s_2016_21_1;
#[path = "2016-21-2.rs"]
mod s_2016_21_2;
#[path = "2016-22-1.rs"]
mod s_2016_22_1;
#[path = "2016-22-2.rs"]
mod s_2016_22_2;

fn main() {
    if let Some(solution) = env::args().nth(1) {
        println!();
        match solution.to_string().as_str() {
            "2016/01/1" => s_2016_01_1::solve(),
            "2016/01/2" => s_2016_01_2::solve(),
            "2016/02/1" => s_2016_02_1::solve(),
            "2016/02/2" => s_2016_02_2::solve(),
            "2016/03/1" => s_2016_03_1::solve(),
            "2016/03/2" => s_2016_03_2::solve(),
            "2016/04/1" => s_2016_04_1::solve(),
            "2016/04/2" => s_2016_04_2::solve(),
            "2016/05/1" => s_2016_05_1::solve(),
            "2016/05/2" => s_2016_05_2::solve(),
            "2016/06/1" => s_2016_06_1::solve(),
            "2016/06/2" => s_2016_06_2::solve(),
            "2016/07/1" => s_2016_07_1::solve(),
            "2016/07/2" => s_2016_07_2::solve(),
            "2016/08/1" => s_2016_08_1::solve(),
            "2016/08/2" => s_2016_08_2::solve(),
            "2016/09/1" => s_2016_09_1::solve(),
            "2016/09/2" => s_2016_09_2::solve(),
            "2016/10/1" => s_2016_10_1::solve(),
            "2016/10/2" => s_2016_10_2::solve(),
            "2016/11/1" => s_2016_11_1::solve(),
            "2016/11/2" => s_2016_11_2::solve(),
            "2016/12/1" => s_2016_12_1::solve(),
            "2016/12/2" => s_2016_12_2::solve(),
            "2016/13/1" => s_2016_13_1::solve(),
            "2016/13/2" => s_2016_13_2::solve(),
            "2016/14/1" => s_2016_14_1::solve(),
            "2016/14/2" => s_2016_14_2::solve(),
            "2016/15/1" => s_2016_15_1::solve(),
            "2016/15/2" => s_2016_15_2::solve(),
            "2016/16/1" => s_2016_16_1::solve(),
            "2016/16/2" => s_2016_16_2::solve(),
            "2016/17/1" => s_2016_17_1::solve(),
            "2016/17/2" => s_2016_17_2::solve(),
            "2016/18/1" => s_2016_18_1::solve(),
            "2016/18/2" => s_2016_18_2::solve(),
            "2016/19/1" => s_2016_19_1::solve(),
            "2016/19/2" => s_2016_19_2::solve(),
            "2016/20/1" => s_2016_20_1::solve(),
            "2016/20/2" => s_2016_20_2::solve(),
            "2016/21/1" => s_2016_21_1::solve(),
            "2016/21/2" => s_2016_21_2::solve(),
            "2016/22/1" => s_2016_22_1::solve(),
            "2016/22/2" => s_2016_22_2::solve(),
            _other => println!("solution not found: {}", solution),
        };
    } else {
        println!("no argument passed, expected a solution like 2016/01/1 as an argument");
    }
}